#######
# zshrc
#######

# echo "=== .zshrc START ==="

# Load zellij if not already running in it
if [[ -z "$ZELLIJ" && (-n "$SSH_CLIENT" || -n "$SSH_TTY" || -n "$SSH_CONNECTION") ]]; then
    HOSTNAME=$(hostname -s)
    MARKER_FILE="/tmp/zellij_pane_$HOSTNAME"
    
    if zellij list-sessions 2>/dev/null | grep -q "main"; then
        if [[ ! -f "$MARKER_FILE" ]]; then
            touch "$MARKER_FILE"
            zellij attach main && zellij action go-to-tab-name "$HOSTNAME" --create
        else
            zellij attach main
        fi
    else
        touch "$MARKER_FILE"
        zellij --session main
    fi
fi

# Define the cleanup function
zellij_cleanup() {
    rm -f /tmp/zellij_pane_$(hostname -s)
}
# Add it to the exit trap
trap zellij_cleanup EXIT INT TERM

autoload -Uz compinit && compinit

# source $HOME/.local/zsh-autocomplete-settings.zsh

if [[ "$SYSTEM_TYPE" = "Darwin" ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
    fpath=(/opt/homebrew/share/zsh/site-functions $fpath)
fi

if [[ "$SYSTEM_TYPE" = "Linux" && "$SYSTEM_ARCH" != "aarch64" ]]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    fpath=(/home/linuxbrew/.linuxbrew/share/zsh/site-functions $fpath)
fi

fpath=($HOME/.config/zsh/completions $fpath)

# load env variables
[[ -f $HOME/.env.zsh ]] && source $HOME/.env.zsh

# BEGIN zgenom init
export ZGENOM_HOME="$HOME/.zgenom"
if [[ ! -d $ZGENOM_HOME ]]; then
    git clone https://github.com/jandamm/zgenom.git $ZGENOM_HOME
fi
source "${HOME}/.zgenom/zgenom.zsh"
source "${HOME}/.zgenomrc"
# END zgenom init

# Load custom keybinds
[[ -f $HOME/.config/zsh/clear-line-keybind.zsh ]] && source $HOME/.config/zsh/clear-line-keybind.zsh

# pnpm tab completion
if [[ ! -f $HOME/.pnpmcompletion.zsh ]]; then
    pnpm completion zsh > $HOME/.pnpmcompletion.zsh
fi
source $HOME/.pnpmcompletion.zsh

# Aliases
eval "$(aliae init zsh)"
# source $HOME/.aliases.sh

# Set rg as the default source for fzf
export FZF_DEFAULT_COMMAND="rg --files --hidden --follow"
# Set fd as default source
# export FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix'
export FZF_DEFAULT_OPTS="--height 40%"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# bind up arrow to fzf history
# bindkey "${key[Up]}" fzf-history-widget

# Options to fzf command
export FZF_COMPLETION_OPTS='--border --info=inline'

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

# ZSH settings
##############
# Enable command auto-correction
ENABLE_CORRECTION="true"

# Display red dots whilst waiting for completion
COMPLETION_WAITING_DOTS="true"

# Save all history
# Incrementally write history to file
setopt INC_APPEND_HISTORY
# Save timestamp to history file too
setopt EXTENDED_HISTORY
# Import newly written commands from the history file
setopt SHARE_HISTORY
setopt extended_glob
setopt longlistjobs

setopt autocd

# History logging disabled - atuin provides better history management
# precmd() {
#     if [ "$(id -u)" -ne 0 ]; then
#         echo "$(date "+%Y-%m-%d.%H:%M:%S") $(pwd) $(history | tail -n 1)" >>! $HOME/history/zsh-history-$(date "+%Y-%m-%d").log;
#     fi
# }

# eval "$(emplace init zsh)"
# source <(blindspot completion -s zsh)

# tab multiplexer configuration: https://github.com/austinjones/tab-rs/
# source "$HOME/.local/share/tab/completion/zsh-history.zsh"
# end tab configuration

# PROMPT CONFIG
[[ -f $HOME/.config/themes/zsh/headline.zsh-theme ]] && source $HOME/.config/themes/zsh/headline.zsh-theme
HL_THIN='off'
HL_OVERWRITE='on'
HL_GIT_COUNT_MODE='on'
HL_GIT_SEP_SYMBOL='|'
HL_CLOCK_MODE='on'
HL_ERR_MODE='detail'

# source $HOME/.config/zsh/prompt.zsh

# fnm (fast node manager)
# if command -v fnm >/dev/null 2>&1; then
# 	eval "$(fnm env --use-on-cd)"
# fi

# mise
if command -v mise >/dev/null 2>&1; then
	eval "$(mise activate zsh)"
fi

# flub autocomplete
if command -v flub >/dev/null 2>&1; then
    eval $(flub autocomplete script zsh)
fi

function gig() { curl -sLw n https://www.toptal.com/developers/gitignore/api/$@ ;}

# Base16 Shell
BASE16_SHELL="$HOME/.config/base16-shell/"
[ -n "$PS1" ] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        source "$BASE16_SHELL/profile_helper.sh"

# fzf
########
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# zoxide
########
if [[ "$CODESPACES" != "true" ]] && command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
fi

# atuin
#######
if [[ "$CODESPACES" != "true" ]] && command -v atuin >/dev/null 2>&1; then
	eval "$(atuin init zsh)"
fi

# Plugin settings
# alias-finder
##############
# show shorter aliases before every command
ZSH_ALIAS_FINDER_AUTOMATIC=true

# zsf-autocomplete
##################
# zstyle ':autocomplete:list-choices:*' min-input 3
# zstyle ':autocomplete:space:*' magic correct-word expand-history
# zstyle ':autocomplete:*' frecent-dirs off

# zsh-users/zsh-autosuggestions
###############################
# Style for Solarized Dark
# ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=241,bold"

# Bind ctrl-space to autosuggest accept
# bindkey "^ " autosuggest-accept
#
# bindkey '^[[A' history-substring-search-up
# bindkey '^[[B' history-substring-search-down

# bun completions
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# git-subrepo
[ -s "$HOME/ghq/github.com/ingydotnet/git-subrepo/.rc" ] && source $HOME/ghq/github.com/ingydotnet/git-subrepo/.rc


# setup funky
command -v funky &>/dev/null && eval "$(funky --init zsh)"

# BEGIN opam configuration
# This is useful if you're using opam as it adds:
#   - the correct directories to the PATH
#   - auto-completion for the opam binary
# This section can be safely removed at any time if needed.
[[ ! -r "$HOME/.opam/opam-init/init.zsh" ]] || source "$HOME/.opam/opam-init/init.zsh" > /dev/null 2> /dev/null
# END opam configuration

# echo "=== .zshrc END ==="
